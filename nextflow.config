params {
	
	// WORKFLOW PARAMETERS TO REVIEW AT EACH RUN
	// ----------------------------------------

	// where to look for inputs
	input_dir = "$launchDir/input"

	// Path for a manually constructed optimal cycle table
	cycles = ""
	
	// Where to place results
	results = "$launchDir/results"
	
	
	// WORKFLOW PARAMETERS THAT SHOULD NOT BE CHANGED
	// ----------------------------------------

	// resources folder
	resources = "$baseDir/resources"
	
	// date for results tagging
	date = new java.util.Date().format('yyyyMMdd')

	// Find number of CPUs on system or node
	available_cpus = Runtime.getRuntime().availableProcessors() - 1

	// Find the maximum number of cpus to allocate for local execution that
	// is not on an HPC cluster
	max_shared_cpus = Math.floor( Runtime.getRuntime().availableProcessors() / 4 )
	
	
}


// WHETHER TO GENERATE A REPORT OF RUN STATISTICS
report {
  enabled = true
  file    = "${params.results}/report.html"
}


// WHETHER TO GENERATE A VISUALIZATION OF THE WORKFLOW
dag {
	enabled = true
	overwrite = true
	file = 'workflow-visualization.png'
}


// WHETHER TO REMOVE TEMPORARY FILES AFTER A SUCCESSFUL RUN
cleanup = false


// PROFILE OPTIONS
profiles {
	
	standard {
		
		docker.enabled = true
		singularity.enabled = false
		conda.enabled = false
		
		process.container = "nrminor/snprelate:v1.0"
		
	}
	
	docker {
		
		docker.enabled = true
		singularity.enabled = false
		conda.enabled = false
		
		process.container = "nrminor/snprelate:v1.0"
		
	}
	
	singularity {
		
		singularity.enabled = true
		docker.enabled = false
		conda.enabled = false
		
		process.container = "nrminor/snprelate:v1.0"
		
	}

	local_path {

		docker.enabled = false
		singularity.enabled = false
		conda.enabled = false
		process.executor = 'local'

	}
	
	// conda {
		
	// 	conda {
	// 		enabled = true
	// 		// cacheDir = "$baseDir/config/envs"
	// 		// createOptions = "-y -c conda-forge -c bioconda -c r"
	// 		useMamba = true
	// 	}
		
	// 	singularity.enabled = false
	// 	docker.enabled = false
		
	// }
}


// MANIFEST
manifest {
	homePage = 'https://github.com/dholab/snpRelate'
	mainScript = 'snpRelate.nf'
	defaultBranch = 'main'
	description = 'A Nextflow pipeline for collating SNP panel results and determining parentage'
	author = 'Nicholas R. Minor'
}
